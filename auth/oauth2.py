from fastapi.security import OAuth2PasswordBearer
from typing import Optional
from datetime import datetime, timedelta
from jose import jwt
from jose.exceptions import JWTError
from sqlalchemy.orm import Session
from db.database import get_db
from fastapi import HTTPException, status, Depends
from db import db_user

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Key generated by command:
# openssl rand -hex 32
SECRET_KEY = '6cd76d0ccf2e4fe6529061a1ff4433c42b0a555a26bd6cb5c1e06b4bf7be5bfa'
ALGORITHM = 'HS256'
ACCESS_TOKEN_EXPIRE_MINUTES = 30


class CurrentUser:
    id: int
    admin: bool
    username: str
    email: str
    reviews_ids: list[int]

    def __init__(self, id: int, admin: bool, username: str, email: str, review_ids: list[int]):
        self.id = id
        self.admin = admin
        self.username = username
        self.email = email
        self.reviews_ids = review_ids


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now() + expires_delta
    else:
        expire = datetime.now() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail='Could not validate credentials',
        headers={"WWW-Authenticate": "Bearer"}
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get('sub')
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    user = db_user.get_user_by_username(db, username)

    if user is None:
        raise credentials_exception

    return CurrentUser(
        user.id,
        user.admin,
        user.username,
        user.email,
        list(map(lambda x: x.id, user.reviews))
    )
